
# Here's the modified code to read IP addresses line by line from a file and perform port scanning:

# Simple port scanner for IP addresses read from a file

import socket

def port_scan(target_host, target_ports):
    for port in target_ports:
        # Create a socket object
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.settimeout(1)

        # Attempt to connect to the target host and port
        try:
            client_socket.connect((target_host, port))
            print(f"Port {port} is open on host {target_host}")
            client_socket.close()
        except Exception as e:
            print(f"Port {port} is closed on host {target_host}")

def main():
    # Define the file containing IP addresses
    file_name = "ip_addresses.txt"

    target_ports = [80, 443, 22, 21]  # Ports to scan

    # Read IP addresses from the file and scan each one
    try:
        with open(file_name, 'r') as file:
            for line in file:
                target_host = line.strip()
                print(f"Scanning IP address {target_host}...")
                port_scan(target_host, target_ports)
    except FileNotFoundError:
        print(f"File '{file_name}' not found.")

if __name__ == "__main__":
    main()

# We define a file named `ip_addresses.txt` containing IP addresses, one per line.
# We use a `with` statement to open the file in read mode and iterate over each line in the file.
# For each line (IP address) in the file, we strip any leading or trailing whitespace and call the `port_scan()` function to perform the port scan.

