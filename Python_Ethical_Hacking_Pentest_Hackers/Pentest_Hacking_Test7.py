
# Here's another example that demonstrates how to use Python's `paramiko` library to perform SSH operations, such as connecting to a remote server and executing commands:

# SSH Operations with Paramiko

# sudo pip install paramiko

import paramiko

def ssh_connect(hostname, port, username, password):
    # Create SSH client
    client = paramiko.SSHClient()

    # Automatically add host keys
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        # Connect to the SSH server
        client.connect(hostname, port=port, username=username, password=password)
        print("Connected to the SSH server.")

        # Execute a command (e.g., listing files in the home directory)
        # stdin, stdout, stderr = client.exec_command("ls -l")
        stdin, stdout, stderr = client.exec_command("ls -lR")

        # Print the output of the command
        print("Output of 'ls -l' command:")
        for line in stdout:
            print(line.strip())

    except paramiko.AuthenticationException:
        print("Authentication failed. Please check your credentials.")
    except paramiko.SSHException as e:
        print(f"SSH connection failed: {e}")
    finally:
        # Close the SSH connection
        client.close()

def main():
    # SSH server details
    hostname = "192.168.207.128"
    port = 22  # Default SSH port
    username = "msfadmin"
    password = "msfadmin"

    # Connect to the SSH server and execute commands
    ssh_connect(hostname, port, username, password)

if __name__ == "__main__":
    main()

# We define a function `ssh_connect()` that takes the hostname, port, username, and password of the SSH server as input.
# Inside the function, we create an SSH client using `paramiko.SSHClient()` and set the policy to automatically add host keys.
# We attempt to connect to the SSH server using the provided credentials. If successful, we execute a command (`ls -l`) on the remote server using `client.exec_command()` and print the output.
# If authentication fails, we handle the `paramiko.AuthenticationException` and print an appropriate error message.
# If there's any other SSH-related exception, we handle it with `paramiko.SSHException` and print the error message.
# Finally, we close the SSH connection using `client.close()`.
# In the `main()` function, we specify the SSH server details (hostname, port, username, and password) and call the `ssh_connect()` function to establish the SSH connection and execute commands on the remote server.

