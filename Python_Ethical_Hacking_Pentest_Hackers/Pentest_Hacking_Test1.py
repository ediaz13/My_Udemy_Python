
# It's important to note that conducting penetration testing and security testing requires a deep understanding of security concepts, tools, and methodologies. Additionally, performing these tests ethically and legally is crucial. Here's a very simple example that demonstrates how to perform a basic port scan using the `socket` library in Python:

# Simple port scanner

import socket

def port_scan(target_host, target_ports):
    for port in target_ports:
        # Create a socket object
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.settimeout(1)

        # Attempt to connect to the target host and port
        try:
            client_socket.connect((target_host, port))
            print(f"Port {port} is open")
            client_socket.close()
        except Exception as e:
            print(f"Port {port} is closed")

def main():
    target_host = "192.168.124.216"  # Replace with the target host
    target_ports = [3389, 25, 53, 23, 80, 443, 22, 21, 110, 993, 995, 3306]  # Ports to scan

    print(f"Scanning {target_host}...")
    port_scan(target_host, target_ports)

if __name__ == "__main__":
    main()

# We define a `port_scan()` function that takes a target host and a list of target ports as input.
# Inside the function, we use a `for` loop to iterate over each port in the list.
# For each port, we attempt to create a socket connection to the target host and port using `socket.socket()` and `connect()`.
# If the connection is successful, we print that the port is open. Otherwise, we print that the port is closed.
# We call the `port_scan()` function in the `main()` function, providing the target host and ports to scan.
# Note: This is a very basic example and may not work in all scenarios. It's recommended to use established and tested security tools for real-world penetration testing and security testing. Additionally, ensure that you have proper authorization before conducting any security testing.

