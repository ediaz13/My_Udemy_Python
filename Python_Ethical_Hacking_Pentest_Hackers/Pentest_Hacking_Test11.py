
# Here's a modified version of the previous script that only prints the open ports and reads the IP addresses from a file called `ip_addresses.txt`:

import socket

def port_scan(ip, start_port, end_port):
    open_ports = []
    print(f"Scanning ports {start_port} to {end_port} on {ip}...")

    for port in range(start_port, end_port + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)

        try:
            result = sock.connect_ex((ip, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        except KeyboardInterrupt:
            print("\nExiting...")
            exit()
        except socket.gaierror:
            print("Hostname could not be resolved. Exiting...")
            exit()
        except socket.error:
            print("Could not connect to server")
            exit()

    return open_ports

def main():
    try:
        with open("ip_addresses.txt", "r") as file:
            ip_addresses = file.readlines()
    except FileNotFoundError:
        print("File 'ip_addresses.txt' not found.")
        exit()

    start_port = int(input("Enter the starting port number: "))
    end_port = int(input("Enter the ending port number: "))

    for ip_address in ip_addresses:
        ip_address = ip_address.strip()
        open_ports = port_scan(ip_address, start_port, end_port)
        if open_ports:
            print(f"Open ports on {ip_address}: {', '.join(map(str, open_ports))}\n")
        else:
            print(f"No open ports found on {ip_address}\n")

if __name__ == "__main__":
    main()

# This script reads the IP addresses from the `ip_addresses.txt` file, scans the specified range of ports for each IP address, and prints only the open ports for each IP address. If no open ports are found for an IP address, it prints a message indicating that.

